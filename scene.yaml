# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 15

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: xyz-osm, layer: earth }
        draw:
            polygons:
                style: grid-earth
                order: global.feature_order
                color: [0.000,0.498,0.831]

    landuse:
        data: { source: xyz-osm }
        draw:
            polygons:
                order: global.feature_order
                visible: false
            lines:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: grid-green
                    color: [0.300,0.300,0.300]
                    visible: true
                lines:
                    color: [0.740,0.740,0.740]
                    width: 1px
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: grid-green
                        color: [0.300,0.300,0.300]
                        visible: true
                    lines:
                        color: [0.740,0.740,0.740]
                        width: 1px
                        visible: true


        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: grid-green
                    color: [0.300,0.300,0.300]
                    visible: true
                lines:
                    color: [0.740,0.740,0.740]
                    width: 1px
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: grid-green
                    color: [0.300,0.300,0.300]
                    visible: true
                lines:
                    color: [0.740,0.740,0.740]
                    width: 1px
                    visible: true

        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: grid-green
                    color: [0.300,0.300,0.300]
                    visible: true
                lines:
                    color: [0.740,0.740,0.740]
                    width: 1px
                    visible: true

    water:
        data: { source: xyz-osm, layer: water }
        draw:
            polygons:
                style: grid-water
                order: global.feature_order
                color: [1.000,1.000,1.000]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: [1.000,1.000,1.000]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [1.000,1.000,1.000]

        water-boundary-ocean:
            filter: { boundary: true, kind: ocean, $zoom: { min: 1 } }
            draw:
                lines:
                    visible: true
                    order: global.feature_order
                    color: [0.740,0.740,0.740]
                    width: 1px
                    join: round

        water_boundaries-not-ocean:
            filter:
                all:
                    - boundary: true
                    - not: { kind: ocean }
                    - $zoom: { min: 8 }
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                lines:
                    visible: true
                    order: global.feature_order
                    color: [0.740,0.740,0.740]
                    width: 1px
                    join: round

            swimming-pools-early:
                filter: { kind: swimming_pool, $zoom: { max: 19 } }
                draw:
                    lines:
                        visible: false
            riverbank:
                # river boundaries like the thames in london, la seine in paris
                filter: { kind: riverbank }
                draw:
                    lines:
                        visible: true
                        color: [0.740,0.740,0.740]
                        width: 1px

    roads:
        data: { source: xyz-osm, layer: roads }
        draw:
            lines:
                #color: black
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [[5,[0.700,0.700,0.700]], [8,[1.000,1.000,1.000]]]
                    width: [[9, 1px], [14, 2px], [16, 4px], [17, 10m]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [[5,[0.700,0.700,0.700]], [8,[1.000,1.000,1.000]]]
                        width: [[5, 0.45px], [6, 0.75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[12, 1.0px], [14, 1.5px], [15, 3px], [16, 5m]]

        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[5,[0.700,0.700,0.700]], [8,[1.000,1.000,1.000]]]
                    width: [[5, 0px], [8, 1px], [14, 2px], [16, 6.5px], [17, 20m]]
                    outline:
                        color: [0.700,0.700,0.700]
                        width: [[5, 0.5px], [8, 0.5px], [12, 1px]]

            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[9, 1px], [14, 2.5px], [16, 4px], [18, 9m]]
                        cap: butt
                        outline:
                            color: [0.700,0.700,0.700]
                            width: [[5, 0.5px], [12, 1px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            outline:
                                color: [0.700,0.700,0.700]

            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        outline:
                            color: [0.700,0.700,0.700]

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt


    buildings:
        data: { source: xyz-osm, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [1.000,1.000,1.000]
            lines:
                visible: false
                order: 329

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 700 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    visible: true
                    style: grid-buildings
                lines:
                    visible: true
                    color: [0.650,0.650,0.650]
                    width: 1px

styles:
    space-constant:
        shaders:
            blocks:
                global: |
                    // Get the constant coordinates (glitches on zooms)
                    // ================================
                    vec2 getConstantCoords () {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                        #else
                        return vec2(0.0,0.0);
                        #endif
                    }

    tools-tilecoords:
        shaders:
            blocks:
                global: |
                    // Varying to be added to both vertex and fragment shaders
                    varying vec2 v_pos;
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 TileCoords() {
                        return fract(v_pos);
                    }
                    #endif
                position: |
                    v_pos = modelPosition().xy;
    tools-grid:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 100. * res;
                        float pct = 0.0;
                        float press = 0.3 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif
    tools-grid2:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 200. * res;
                        float pct = 0.0;
                        float press = 0.6 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif

    tools-grid3:
        mix: tools-tilecoords
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    bool grid(vec2 st, float res, float press) {
                        vec2 grid = fract(st * res);
                        return (grid.x < res * press) || (grid.y < res * press);
                    }
                    float TileGrid(float res) {
                        vec2 st = TileCoords() * 400. * res;
                        float pct = 0.0;
                        float press = 0.9 + (1.0 - fract(u_map_position.z)) * 0.1;
                        if (grid(st, 0.1, press)) { pct += 0.5; }
                        return pct;
                    }
                    float TileGrid() {
                        return mix(TileGrid(1.), TileGrid(2.), fract(u_map_position.z));
                    }
                    #endif

    grid-earth2:
        base: polygons
        mix: [space-constant, patterns-grid]
        shaders:
            blocks:
                color: |
                    vec2 st = getConstantCoords();
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.100,0.100,0.100), tileGrid());
    grid-earth:
        base: polygons
        mix: tools-grid2
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.530,0.530,0.530), TileGrid());

    grid-buildings:
        base: polygons
        mix: [tools-grid2]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.830,0.830,0.830), TileGrid());

    grid-water:
        base: polygons
        mix: [tools-grid]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.850,0.850,0.850), TileGrid());

    grid-green:
        base: polygons
        mix: [tools-grid3]
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(1.00,1.00,1.00);
                    color.rgb = mix(color.rgb, vec3(0.570,0.570,0.570), TileGrid());
    
    patterns-grid:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Collection of functions to draw grids. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)    
            examples:
                blueprint:
                    url: https://tangrams.github.io/tangram-sandbox/styles/blueprint.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/blueprint.png
                    lines: 75-76
                grain:
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain.png
                    lines: 15
        mix: [space-tile]
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid (vec2 st, float res, float press) {
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid (vec2 st, float res) {
                        return grid(st, res, 1.0);
                    }

                    //
                    // Draw a grid in 45 degress with a specific width
                    float diagonalGrid(vec2 st, float width){
                        return step(.5,max( smoothstep(st.x-width,st.x,st.y)*(1.-smoothstep(st.x,st.x+width,st.y)),
                                            smoothstep(st.x-width,st.x,1.0-st.y)*(1.-smoothstep(st.x,st.x+width,1.0-st.y))));
                    }

                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid (float res) {
                        vec2 st = getTileCoords()*320.*res;
                        float pct = 0.0;
                        float press = 0.6;
                        //float press = 0.6+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.1,press)) pct += 0.5;
                        return pct;
                    }

                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid() { 
                        return mix(tileGrid(1.),tileGrid(1.),fract(u_map_position.z)); 
                    }

    space-tile:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        test:
            tile: 
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;